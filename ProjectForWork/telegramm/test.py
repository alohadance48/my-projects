import telebot
from telebot import types
from google.oauth2 import service_account
from googleapiclient.discovery import build
import os
import logging
import threading
import concurrent.futures
import time

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.ERROR, filename="bot.log", filemode="w",
                    format='%(asctime)s - %(levelname)s - %(message)s')
user_locks = {}  # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

# –¢–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞ (–ª—É—á—à–µ —Ö—Ä–∞–Ω–∏—Ç—å –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è)
TOKEN = '***'
if not TOKEN:
    print("–û—à–∏–±–∫–∞: –ù–µ –Ω–∞–π–¥–µ–Ω —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
    exit()
# –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å —Å –ø—É—Ç—è–º–∏ –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –æ—Ç–¥–µ–ª–∞
department_images = {
    '–ò': '/home/vlados/photos_for_bot/event.jpg',
    'dept2': '/path/to/image2.png',
    # –î–æ–±–∞–≤—å—Ç–µ –∑–¥–µ—Å—å –ø—É—Ç–∏ –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º –¥–ª—è –≤—Å–µ—Ö –æ—Ç–¥–µ–ª–æ–≤
}

# –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ—Ç —Å–ª–æ–≤–∞—Ä—å –≤ —Ñ—É–Ω–∫—Ü–∏–∏ send_department_result

bot = telebot.TeleBot(TOKEN, threaded=True)

# –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –∫–ª—é—á–∞–º–∏ –¥–ª—è Google Sheets API (–ª—É—á—à–µ —Ö—Ä–∞–Ω–∏—Ç—å –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è)
SCOPES = ['https://www.googleapis.com/auth/spreadsheets']
SERVICE_ACCOUNT_FILE = 'key.json'
if not SERVICE_ACCOUNT_FILE:
    print("–û—à–∏–±–∫–∞: –ù–µ –Ω–∞–π–¥–µ–Ω –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É credentials.json –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
    exit()

# ID —Ç–∞–±–ª–∏—Ü—ã Google Sheets
SPREADSHEET_ID = '***'
if not SPREADSHEET_ID:
    print("–û—à–∏–±–∫–∞: –ù–µ –Ω–∞–π–¥–µ–Ω ID Google Sheet –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
    exit()

image_folder = '/home/vladosl/photos_for_bot'

# –î–∏–∞–ø–∞–∑–æ–Ω –¥–ª—è –∑–∞–ø–∏—Å–∏ –¥–∞–Ω–Ω—ã—Ö
RANGE_NAME = '–õ–∏—Å—Ç1!A1'

# –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
try:
    credentials = service_account.Credentials.from_service_account_file(
        SERVICE_ACCOUNT_FILE, scopes=SCOPES)

    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ Google Sheets API
    service = build('sheets', 'v4', credentials=credentials)
    print(credentials.service_account_email)

except Exception as e:
    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–µ—Ä–≤–∏—Å–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞: {e}")
    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–µ—Ä–≤–∏—Å–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞: {e}")
    exit()

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_answers = {}

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ—Ç–¥–µ–ª–æ–≤
departments = {}

user_locks = {}  # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_steps = {}  # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —à–∞–≥–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
selected_departments = {}  # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –æ—Ç–¥–µ–ª–æ–≤
user_department_sent = {}
apply_button_images = {
    '–ú': 'apply_methodic.jpg',
    'HR': 'apply_hr.jpg',
    '–ò': 'apply_event.jpg',
    '–ù': 'apply_nabor.jpg',
    '–ü': 'apply_partner.jpg',
    '–ê': 'apply_admin.jpg'
}
# –°–ª–æ–≤–∞—Ä—å —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏ –∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤
questions = {
    1: {
        'question': '*–í—ã - –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å–∞ ¬´–Ø –≤ –¥–µ–ª–µ¬ª. –ß–µ–º –∑–∞–π–º–µ—Ç–µ—Å—å?*',
        'options': {
            '–ê': '–ü–æ–¥–±–µ—Ä—É –ø–ª–æ—â–∞–¥–∫—É, –ø–æ–∑–∞–±–æ—á—É—Å—å –æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–º –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–∏',
            '–ë': '–°–¥–µ–ª–∞—é —Ç–∞–∫, —á—Ç–æ–±—ã –ø—Ä–∏—à–ª–æ –º–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤',
            '–í': '–ü—Ä–æ–¥—É–º–∞—é –ø–ª–∞–Ω –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏—è, –ø–æ–¥–≥–æ—Ç–æ–≤–ª—é –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é',
            '–ì': '–ü–æ–¥–±–µ—Ä—É —ç–∫—Å–ø–µ—Ä—Ç–∞, —Å–æ–±–µ—Ä—É –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å',
            '–î': '–í–æ–∑—å–º—É –Ω–∞ —Å–µ–±—è –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç—å',
            '–ï': '–ù–∞–ª–∞–∂—É –∫–æ–Ω—Ç–∞–∫—Ç —Å –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—è–º–∏ –≤—É–∑–∞, –ø–æ–¥—É–º–∞—é, —á–µ–º –æ–Ω–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –ø–æ–ª–µ–∑–Ω—ã'
        }
    },
    2: {
        'question': '*–í—ã–±–µ—Ä–∏—Ç–µ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –≤–∞—Å –æ–ø–∏—Å—ã–≤–∞—é—Ç*',
        'options': {
            '–ê': '–Ø —É–º–µ—é –≤–¥–æ—Ö–Ω–æ–≤–ª—è—Ç—å –ª—é–¥–µ–π –∏–¥–µ–µ–π',
            '–ë': '–Ø –ª—é–±–ª—é —Ä–∞–±–æ—Ç–∞—Ç—å —Å –∫–æ–º–∞–Ω–¥–∞–º–∏ –∏ –∏—Ö —Ä–∞–∑–≤–∏—Ç–∏–µ–º',
            '–í': '–Ø ‚Äì –∫—Ä—É—Ç–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä',
            '–ì': '–Ø –ª–µ–≥–∫–æ –≤—ã—Ö–æ–∂—É –Ω–∞ –∫–æ–Ω—Ç–∞–∫—Ç —Å –ª—é–¥—å–º–∏',
            '–î': '–Ø —Ö–æ—Ä–æ—à–æ —Ä–∞–±–æ—Ç–∞—é —Å —Ç–∞–±–ª–∏—Ü–∞–º–∏, –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã–π',
            '–ï': '–Ø –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–π —á–µ–ª–æ–≤–µ–∫, –ª—é–±–ª—é —Å–æ–∑–¥–∞–≤–∞—Ç—å —á—Ç–æ-—Ç–æ –Ω–æ–≤–æ–µ'
        }
    },
    3: {
        'question': '*–ö–∞–∫–æ–π –ø–æ–¥–∞—Ä–æ–∫ –≤—ã –±—ã —Ç–æ—á–Ω–æ –æ—Ü–µ–Ω–∏–ª–∏?*',
        'options': {
            '–ê': '–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –Ω–∞ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –∫—É—Ä—Å',
            '–ë': '–ó–Ω–∞–∫–æ–º—Å—Ç–≤–æ —Å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –∫—Ä—É–ø–Ω–æ–π –∫–æ–º–ø–∞–Ω–∏–∏',
            '–í': '–°–µ—Å—Å–∏—è —Å –ø—Å–∏—Ö–æ–ª–æ–≥–æ–º/–º–µ–Ω—Ç–æ—Ä–æ–º',
            '–ì': '–ö–æ—Ä–æ–±–∫–∞ —Å –∫–∞–Ω—Ü–µ–ª—è—Ä–∏–µ–π',
            '–î': '–ü–æ–µ–∑–¥–∫–∞ –Ω–∞ –∏—é–ª—å–∫—É',
            '–ï': '–£–∫–æ–º–ø–ª–µ–∫—Ç–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞'
        }
    },
    4: {
        'question': '*–ö–∞–∫–æ–µ –≤—ã—Å–∫–∞–∑—ã–≤–∞–Ω–∏–µ –ª—É—á—à–µ –æ—Ç—Ä–∞–∂–∞–µ—Ç –≤–∞—à—É –∂–∏–∑–Ω–µ–Ω–Ω—É—é –ø–æ–∑–∏—Ü–∏—é?*',
        'options': {
            '–ê': '–î—å—è–≤–æ–ª –≤ –º–µ–ª–æ—á–∞—Ö',
            '–ë': '–ß–µ–º –±–æ–ª—å—à–µ - —Ç–µ–º –ª—É—á—à–µ!',
            '–í': '–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ - —ç—Ç–æ –∫–ª—é—á –∫ –¥–µ–π—Å—Ç–≤–∏—é',
            '–ì': '–°–∏–ª–∞ - —ç—Ç–æ –ª—é–¥–∏',
            '–î': '–ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ - —ç—Ç–æ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç',
            '–ï': '–ù–∏–∫–æ–≥–¥–∞ –Ω–µ –∑–Ω–∞–µ—à—å, –∫—Ç–æ –∏ –∫–æ–≥–¥–∞ –æ–∫–∞–∂–µ—Ç—Å—è –¥–ª—è —Ç–µ–±—è –ø–æ–ª–µ–∑–Ω—ã–º'
        }
    },
    5: {
        'question': '*–ö–∞–∫–∞—è –∫–∞—Ä—Ç–∏–Ω–∫–∞ –≤–∞–º –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –Ω—Ä–∞–≤–∏—Ç—Å—è?*',
        'options': {
            '–ê': '–ö–∞—Ä—Ç–∏–Ω–∫–∞ 1',
            '–ë': '–ö–∞—Ä—Ç–∏–Ω–∫–∞ 2',
            '–í': '–ö–∞—Ä—Ç–∏–Ω–∫–∞ 3',
            '–ì': '–ö–∞—Ä—Ç–∏–Ω–∫–∞ 4',
            '–î': '–ö–∞—Ä—Ç–∏–Ω–∫–∞ 5',
            '–ï': '–ö–∞—Ä—Ç–∏–Ω–∫–∞ 6'
        }
    },
    'position': {
        'question': '*–ö–∞–∫–∞—è —É —Ç–µ–±—è –¥–æ–ª–∂–Ω–æ—Å—Ç—å?*',
        'options': {
            '–ú–ª–∞–¥—à–∏–π –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫': '–ú–ª–∞–¥—à–∏–π –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫',
            '–°—Ç–∞—Ä—à–∏–π –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫': '–°—Ç–∞—Ä—à–∏–π –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫',
            '–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä': '–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä'
        }
    },
    'department': {
        'question': '*–ö–∞–∫–æ–π –æ—Ç–¥–µ–ª —Ç–µ–±–µ –∏–Ω—Ç–µ—Ä–µ—Å–µ–Ω?*',
        'options': {
            '–ú': '–ú–µ—Ç–æ–¥–∏—á–µ—Å–∫–∏–π –æ—Ç–¥–µ–ª',
            'HR': 'HR-–æ—Ç–¥–µ–ª',
            '–ò': 'Event-–æ—Ç–¥–µ–ª',
            '–ù': '–ù–∞–±–æ—Ä–Ω—ã–π —à—Ç–∞–±',
            '–ü': '–ü–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∏–π –æ—Ç–¥–µ–ª',
            '–ê': '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–π –æ—Ç–¥–µ–ª'
        }
    }
}

# –°–ª–æ–≤–∞—Ä—å —Å –æ–ø–∏—Å–∞–Ω–∏—è–º–∏ –æ—Ç–¥–µ–ª–æ–≤ –∏ –∫–∞—Ä—Ç–∏–Ω–∫–∞–º–∏
department_descriptions = {
    '–ú': {
        'name': 'ü§î–ê–ª–µ—à–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–µ–±—è –≤...',
        'description': """
*–ú–µ—Ç–æ–¥–∏—á–µ—Å–∫–∏–π –æ—Ç–¥–µ–ª*

_–ü–æ–¥—Å—á–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥–∞ –∫–æ–º–∞–Ω–¥? –ù–æ–≤—ã–π –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å—Å–∫–∏–π –∫—É—Ä—Å? –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π?_ 

–¢–µ–ø–µ—Ä—å —ç—Ç–æ –º–æ–∂–µ—Ç —Å—Ç–∞—Ç—å –Ω–µ —Ä–∞–∑—Ä—ã–≤–Ω–æ —Å–≤—è–∑–∞–Ω–Ω—ã–º–∏ —Å —Ç–æ–±–æ–π –≤–µ—â–∞–º–∏, –≤–µ–¥—å *—Ç—ã ‚Äì –∫–∞–Ω–¥–∏–¥–∞—Ç –≤ –º–µ—Ç–æ–¥–∏—á–µ—Å–∫–∏–π –æ—Ç–¥–µ–ª.* 

–£ —Ç–µ–±—è —Ö–æ—Ä–æ—à–∏–µ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏: —Ç—ã —Å–º–æ–∂–µ—à—å —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ —Ä–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∏ –æ—Ü–µ–Ω–∏–≤–∞—Ç—å –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã. 

üì© –¢—ã –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞–Ω–Ω—ã–π, –∞ —ç—Ç–æ –ø–æ–º–æ–∂–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –∏ –∫–æ–æ—Ä–¥–∏–Ω–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ —Ç–æ, —á—Ç–æ –ø—Ä–∏–¥—É–º–∞–ª —Å –∫–æ–º–∞–Ω–¥–æ–π!

*–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!!!*ü•≥""",
        'image': 'methodic.jpg'
    },
    'HR': {
        'name': 'ü§î–ê–ª–µ—à–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–µ–±—è –≤...',
        'description': """*HR –æ—Ç–¥–µ–ª*

_–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤—ã, –æ–±—É—á–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã, —Å–æ—Ü–∏–æ–ª–æ–≥–∏—è, —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ —Ä–∞–±–æ—Ç—ã —Å–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π –≤ 600 —á–µ–ª–æ–≤–µ–∫._ 

–ò —ç—Ç–æ –Ω–µ –º–µ—á—Ç–∞, –∞ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç—å:
*–æ—Ç–¥–µ–ª –ø–æ —Ä–∞–∑–≤–∏—Ç–∏—é —Ç–∞–ª–∞–Ω—Ç–æ–≤ –∏ –≤–Ω–µ–¥—Ä–µ–Ω–∏—é –∏–Ω–Ω–æ–≤–∞—Ü–∏–π [HR].*

üì© –¢—ã –ø–æ–∫–∞–∑–∞–ª —Å–µ–±—è –∫–æ–º–∞–Ω–¥–Ω—ã–º –∏ –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–º —á–µ–ª–æ–≤–µ–∫–æ–º, –ø–æ—ç—Ç–æ–º—É –ª—É—á—à–µ —Ç–µ–±—è –Ω–∏–∫—Ç–æ –Ω–µ –ø—Ä–∏–¥—É–º–∞–µ—Ç –ø—Ä–æ–≥—Ä–∞–º–º—É –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–π –Ω–∞ —Å–µ–∑–æ–Ω!

–¢—ã –ø–æ-–Ω–∞—Å—Ç–æ—è—â–µ–º—É —Ü–µ–Ω–∏—à—å –ª—é–¥–µ–π –≤ —Å–≤–æ–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–∏ –∏ —Å—Ç—Ä–µ–º–∏—à—å—Å—è –∫ —Ç–æ–º—É, —á—Ç–æ–±—ã —Ä—è–¥–æ–º —Å —Ç–æ–±–æ–π —Ä–∞–∑–≤–∏–≤–∞–ª–∏—Å—å.

–¢–µ–ø–µ—Ä—å —Ç—ã –Ω–∞ —à–∞–≥ –±–ª–∏–∂–µ –∫ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–≤–æ–∏—Ö –∏–¥–µ–π –≤–Ω—É—Ç—Ä–∏ –ü—Ä–æ–≥—Ä–∞–º–º—ã.

*–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!!!*ü•≥""",
        'image': 'IMG_1862.JPG'
    },
    '–ò': {
        'name': 'ü§î–ê–ª–µ—à–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–µ–±—è –≤...',
        'description': """*Event –æ—Ç–¥–µ–ª*

_–û—Ç–∫—Ä—ã—Ç–∏–µ? –ë–∏—Ç–≤–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤? –ó–∞–∫—É–ø–∫–∞ –∏ –ø–µ—á–∞—Ç–∫–∞ –≤—Å–µ–≥–æ-–≤—Å–µ–≥–æ-–≤—Å–µ–≥–æ? –ò—é–ª—å–∫–∞?_

–î–∞, –¥—Ä—É–≥!
*–¢—ã ‚Äì —Ç–æ—Ç –µ—â–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä!*

üì© –¢–≤–æ–∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä—Å–∫–∏–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏, —É–º–µ–Ω–∏–µ –¥–µ—Ä–∂–∞—Ç—å –≤ –≥–æ–ª–æ–≤–µ –º–Ω–æ–≥–æ –∑–∞–¥–∞—á, —Ç–≤–æ—Ä—á–µ—Å–∫–∏–π –ø–æ–¥—Ö–æ–¥ –∏ –Ω–∞–≤—ã–∫ —Ä–∞–±–æ—Ç—ã –≤ –∫–æ–º–∞–Ω–¥–µ ‚Äì –Ω–∞ –≤—ã—Å–æ—á–∞–π—à–µ–º —É—Ä–æ–≤–Ω–µ.

–ê –µ—Å–ª–∏ —Ö–æ—á–µ—à—å —Ä–∞–∑–≤–∏–≤–∞—Ç—å –∏—Ö —Å–∏–ª—å–Ω–µ–µ, —Ç–æ –ê–ª–µ—à–∞ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç –ø—Ä–∏—Å–ª—É—à–∞—Ç—å—Å—è)

–í–µ–¥—å –∏–º–µ–Ω–Ω–æ —Ç—ã –º–æ–∂–µ—à—å —Å—Ç–∞—Ç—å —á–∞—Å—Ç—å—é —Å–∞–º—ã—Ö –º–∞—Å—à—Ç–∞–±–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤ –ü—Ä–æ–≥—Ä–∞–º–º—ã!

*–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!!!*ü•≥""",
        'image': 'event.jpg'
    },
    '–ù': {
        'name': 'ü§î–ê–ª–µ—à–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–µ–±—è –≤...',
        'description': """*–ù–∞–±–æ—Ä–Ω—ã–π –æ—Ç–¥–µ–ª*

_–ü–ª–∞–Ω –Ω–∞ –∑–∞—Ö–≤–∞—Ç –≤—Å–µ—Ö –≤—É–∑–æ–≤ –∏ –Ω–∞–±–æ—Ä —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: –µ—Å—Ç—å._
_–¢—ã –≤ —ç—Ç–æ–º –ø–ª–∞–Ω–µ: —Ç–µ–ø–µ—Ä—å —Ç–æ–∂–µ!_

üì© –£ —Ç–µ–±—è *–æ—Ç–ª–∏—á–Ω—ã–µ –∫–æ–º–º—É–Ω–∏–∫–∞—Ç–∏–≤–Ω—ã–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏*, —á—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç —Ç–µ–±–µ –¥–æ–≥–æ–≤–∞—Ä–∏–≤–∞—Ç—å—Å—è –æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–∏ –ª—é–±—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤.

–ê —Å–∞–º–æ–µ –≥–ª–∞–≤–Ω–æ–µ ‚Äì —Ç—ã —É–º–µ–µ—à—å –≤–¥–æ—Ö–Ω–æ–≤–ª—è—Ç—å –¥—Ä—É–≥–∏—Ö –ª—é–¥–µ–π —Å–≤–æ–µ–π –∏–¥–µ–µ–π –∏ —Å—Ç—Ä–æ–∏—Ç—å –æ—Ç–Ω–æ—à–µ–Ω–∏—è –≤–¥–æ–ª–≥—É—é. 

_–¢–∞–∫ –Ω–µ –∫–∞–∂–¥—ã–π —Å–º–æ–∂–µ—Ç!_ 
–í –∫–æ–º–∞–Ω–¥–µ —Ç–æ—á–Ω–æ –Ω–∞–π–¥–µ—à—å –µ–¥–∏–Ω–æ–º—ã—à–ª–µ–Ω–Ω–∏–∫–æ–≤.

*–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!!!*ü•≥""",
        'image': 'nabor.jpg'
    },
    '–ü': {
        'name': 'ü§î–ê–ª–µ—à–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–µ–±—è –≤...',
        'description': """*–ü–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∏–π –æ—Ç–¥–µ–ª*... _–¢–∞–∫ —Å—Ä–∞–∑—É –∏ –ø–æ–¥—É–º–∞–ª–∏, —á—Ç–æ —ç—Ç–æ –ø—Ä–æ —Ç–µ–±—è. –î–µ–ª–æ–≤–æ–π —É—Å–ø–µ—Ö –≤–∏–¥–µ–Ω —Å—Ä–∞–∑—É!_... üì©  –£ —Ç–µ–±—è –±–ª–∏—Å—Ç–∞—Ç–µ–ª—å–Ω—ã–µ *–Ω–∞–≤—ã–∫–∏ –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–æ–≤* ‚Äì —Ç—ã —Ç–æ—á–Ω–æ —Å–º–æ–∂–µ—à—å –¥–æ—Å—Ç–∏—á—å –≤–∑–∞–∏–º–æ–≤—ã–≥–æ–¥–Ω—ã—Ö —Å–æ–≥–ª–∞—à–µ–Ω–∏–π. 

–¢—ã *–º—ã—Å–ª–∏—à—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏* ‚Äì –≤–∏–¥–∏—à—å, –∫—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–ª–µ–∑–µ–Ω –¥–ª—è –ü—Ä–æ–≥—Ä–∞–º–º—ã, —É–º–µ–µ—à—å —Å—Ç—Ä–æ–∏—Ç—å –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–µ —Å–≤—è–∑–∏. –ü–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–Ω–æ!

*–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!!!*ü•≥""",
        'image': 'partner.jpg'
    },
    '–ê': {
        'name': 'ü§î–ê–ª–µ—à–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–µ–±—è –≤...',
        'description': """*–ù–∞–±–æ—Ä–Ω—ã–π –æ—Ç–¥–µ–ª*

_–ü–ª–∞–Ω –Ω–∞ –∑–∞—Ö–≤–∞—Ç –≤—Å–µ—Ö –≤—É–∑–æ–≤ –∏ –Ω–∞–±–æ—Ä —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: –µ—Å—Ç—å._
_–¢—ã –≤ —ç—Ç–æ–º –ø–ª–∞–Ω–µ: —Ç–µ–ø–µ—Ä—å —Ç–æ–∂–µ!_

üì© *–£ —Ç–µ–±—è –æ—Ç–ª–∏—á–Ω—ã–µ –∫–æ–º–º—É–Ω–∏–∫–∞—Ç–∏–≤–Ω—ã–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏,* —á—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç —Ç–µ–±–µ –¥–æ–≥–æ–≤–∞—Ä–∏–≤–∞—Ç—å—Å—è –æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–∏ –ª—é–±—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤.

–ê —Å–∞–º–æ–µ –≥–ª–∞–≤–Ω–æ–µ ‚Äì —Ç—ã —É–º–µ–µ—à—å –≤–¥–æ—Ö–Ω–æ–≤–ª—è—Ç—å –¥—Ä—É–≥–∏—Ö –ª—é–¥–µ–π —Å–≤–æ–µ–π –∏–¥–µ–µ–π –∏ —Å—Ç—Ä–æ–∏—Ç—å –æ—Ç–Ω–æ—à–µ–Ω–∏—è –≤–¥–æ–ª–≥—É—é. 

_–¢–∞–∫ –Ω–µ –∫–∞–∂–¥—ã–π —Å–º–æ–∂–µ—Ç!_ 
–í –∫–æ–º–∞–Ω–¥–µ —Ç–æ—á–Ω–æ –Ω–∞–π–¥–µ—à—å –µ–¥–∏–Ω–æ–º—ã—à–ª–µ–Ω–Ω–∏–∫–æ–≤.

*–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!!!*ü•≥""",
        'image': 'admin.jpg'
    }
}

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –æ—Ç–¥–µ–ª—ã
answer_to_department = {
    '–ê': '–ò',
    '–ë': '–ù',
    '–í': '–ú',
    '–ì': 'HR',
    '–î': '–ê',
    '–ï': '–ü'
}
# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –±—É–∫–≤ –≤ –æ—Ç–¥–µ–ª—ã –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
answer_to_department_last = {
    '–ê': 'HR',
    '–ë': '–ü',
    '–í': '–ê',
    '–ì': '–ù',
    '–î': '–ú',
    '–ï': '–ò'
}

# –°–ª–æ–≤–∞—Ä—å —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
images = {
    '–ê': 'IMG_1862.jpg',
    '–ë': 'partner.jpg',
    '–í': 'admin.jpg',
    '–ì': 'nabor.jpg',
    '–î': 'methodic.jpg',
    '–ï': 'event.jpg'
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
user_steps = {}


def send_question(chat_id, question_number):
    if question_number == 5:
        media = []
        image_found = True  # –§–ª–∞–≥, —É–∫–∞–∑—ã–≤–∞—é—â–∏–π, –±—ã–ª–∏ –ª–∏ –Ω–∞–π–¥–µ–Ω—ã –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        opened_files = []  # –°–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Ñ–∞–π–ª–æ–≤

        for option in ['–ê', '–ë', '–í', '–ì', '–î', '–ï']:
            image_path = os.path.join(image_folder, f"{images[option]}")
            try:
                image_file = open(image_path, 'rb')  # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª
                opened_files.append(image_file)  # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –≤ —Å–ø–∏—Å–æ–∫
                media.append(types.InputMediaPhoto(media=image_file, caption=f'–í–∞—Ä–∏–∞–Ω—Ç {option}'))
            except FileNotFoundError:
                logging.error(f"Image file not found: {image_path}")
                bot.send_message(chat_id, f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –≤–∞—Ä–∏–∞–Ω—Ç–∞ {option} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
                image_found = False  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –≤ False
                break  # –ü—Ä–µ—Ä—ã–≤–∞–µ–º —Ü–∏–∫–ª, –µ—Å–ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
            except Exception as e:
                logging.error(f"Error reading image file: {image_path} - {e}")
                bot.send_message(chat_id, f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –≤–∞—Ä–∏–∞–Ω—Ç–∞ {option}.")
                image_found = False  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –≤ False
                break  # –ü—Ä–µ—Ä—ã–≤–∞–µ–º —Ü–∏–∫–ª –ø—Ä–∏ –ª—é–±–æ–π –¥—Ä—É–≥–æ–π –æ—à–∏–±–∫–µ —á—Ç–µ–Ω–∏—è

        if image_found and media:  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤—Å–µ —Ñ–∞–π–ª—ã –Ω–∞–π–¥–µ–Ω—ã
            try:
                send_media_group_with_retries(chat_id, media)
            except Exception as e:
                logging.error(f"Unexpected error sending media group: {e}")
                bot.send_message(chat_id, "–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.")
            finally:
                # –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ —Ñ–∞–π–ª—ã –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
                for file in opened_files:
                    file.close()
        elif not image_found:
            bot.send_message(chat_id, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, —Ç–∞–∫ –∫–∞–∫ –Ω–µ –≤—Å–µ —Ñ–∞–π–ª—ã –Ω–∞–π–¥–µ–Ω—ã.")

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ—Å–ª–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    question_text = f"**–í–æ–ø—Ä–æ—Å {question_number}:**\n{questions[question_number]['question']}\n\n"
    options_text = "\n".join(
        [f"{option}: {description}" for option, description in questions[question_number]['options'].items()]
    )

    bot.send_message(chat_id, f"{question_text}\n{options_text}", parse_mode="Markdown")

    # –ó–∞–¥–µ—Ä–∂–∫–∞ 5 —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É –ø–µ—Ä–≤—ã–º –∏ –≤—Ç–æ—Ä—ã–º –≤–æ–ø—Ä–æ—Å–æ–º, 3 —Å–µ–∫—É–Ω–¥—ã –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö
    if question_number == 1:
        time.sleep(5)
    else:
        time.sleep(3)

    bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–≤–µ—Ç:", reply_markup=create_markup(question_number))


def send_media_group_with_retries(chat_id, media, retries=3, delay=5):
    for attempt in range(retries):
        try:
            bot.send_media_group(chat_id, media)
            return  # –£—Å–ø–µ—à–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞, –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≥—Ä—É–ø–ø—ã –º–µ–¥–∏–∞ (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{retries}): {e}")
            if attempt < retries - 1:  # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞
                time.sleep(delay)  # –ñ–¥–µ–º –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
            else:
                bot.send_message(chat_id, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ—Å–ª–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ø—ã—Ç–æ–∫.")

def create_markup(question_number):
    markup = types.InlineKeyboardMarkup(row_width=6)
    buttons = [types.InlineKeyboardButton(letter, callback_data=f'answer_{question_number}_{letter}') for letter in
               ['–ê', '–ë', '–í', '–ì', '–î', '–ï']]
    markup.add(*buttons)
    return markup

def create_position_markup():
    markup = types.InlineKeyboardMarkup(row_width=1)
    buttons = [types.InlineKeyboardButton(position, callback_data=f'position_{position}') for position in
               questions['position']['options'].keys()]
    markup.add(*buttons)
    return markup

def create_department_markup():
    markup = types.InlineKeyboardMarkup(row_width=2)  # –ò–∑–º–µ–Ω–∏–º row_width –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
    buttons = [types.InlineKeyboardButton(f"{dept} ({code})",
                                          callback_data=f'department_{code}') for code, dept in
               questions['department']['options'].items()]
    markup.add(*buttons)
    # –î–æ–±–∞–≤–∏–º –∫–Ω–æ–ø–∫–∏ "–ì–æ—Ç–æ–≤–æ" –∏ "–°–±—Ä–æ—Å–∏—Ç—å"
    done_button = types.InlineKeyboardButton("–ì–æ—Ç–æ–≤–æ", callback_data='department_done')
    reset_button = types.InlineKeyboardButton("–°–±—Ä–æ—Å–∏—Ç—å", callback_data='department_reset')
    markup.add(done_button, reset_button)
    return markup

@bot.message_handler(commands=['start'])
def start(message):
    user_id = message.from_user.id
    user_answers[user_id] = {'answers': [], 'fio': None, 'position': None, 'department': [], 'username': None}
    departments[user_id] = {dept: 0 for dept in '–ú HR –ò –ù –ü –ê'.split()}

    # –ü—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
    image_path = '/home/vlados/bot_for_im_in/photos_for_bot/first.png' # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è start_image.png

    # –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    text = """<b>–ø—Ä–∏–≤–µ—Ç, —è —Ä–∞—Å–ø–æ—Ä—è–¥–∏—Ç–µ–ª—å-–ê–ª–µ—à–∞!</b>üëí

–º–æ—è –∑–∞–¥–∞—á–∞ –ø—Ä–æ—Å—Ç–∞—è: 
<i>—Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –∫–∞–∫–æ–π –æ—Ç–¥–µ–ª —Ç–µ–±–µ —Å—Ç–æ–∏—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –≤ –∫–∞—á–µ—Å—Ç–≤–µ –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏—è.</i>

<u>—á—Ç–æ —Ç–∞–∫–æ–µ –æ—Ç–¥–µ–ª—ã?</u>

‚Äì —ç—Ç–æ –∫–æ–º–∞–Ω–¥—ã –≤–Ω—É—Ç—Ä–∏ –ü—Ä–æ–≥—Ä–∞–º–º—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ä–µ–∞–ª–∏–∑—É—é—Ç –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç—ã. –û–Ω–∏ –ø–æ–º–æ–≥–∞—é—Ç —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è–º –æ–∫—Ä—É–≥–æ–≤ –≤ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–∏ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞ –Ω–∞—à–µ–≥–æ –±–æ–ª—å—à–æ–≥–æ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞!

–¥–∞–ª—å—à–µ —Ç–µ–±—è –∂–¥–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥—É—Ç —É–∑–Ω–∞—Ç—å —Å–µ–±—è –≤ –∫–æ–Ω—Ç—É—Ä–µ —Ä–∞–±–æ—Ç—ã —Å –æ—Ç–¥–µ–ª–∞–º–∏, –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ —Ä–∞–±–æ—Ç—É –≤ –∫–æ–º–∞–Ω–¥–µ.

<b>–≤–∞–∂–Ω–æ:</b> 
–∏—Ç–æ–≥–∏ —Ç–µ—Å—Ç–∞ –º–æ–≥—É—Ç –Ω–µ —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å —Ç–µ–º –æ—Ç–¥–µ–ª–æ–º, –∫—É–¥–∞ —Ç—ã —Ä–µ—à–∏—à—å –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É.

<b>—É–¥–∞—á–∏</b>üíó"""

    try:
        with open(image_path, 'rb') as photo:
            bot.send_photo(message.chat.id, photo, caption=text, parse_mode="HTML")
    except FileNotFoundError:
        logging.error(f"Image file not found: {image_path}")
        bot.send_message(message.chat.id, text, parse_mode="HTML")
    except Exception as e:
        logging.error(f"Error sending image: {e}")
        bot.send_message(message.chat.id, text, parse_mode="HTML")

    time.sleep(5)
    send_question(message.chat.id, 1)

@bot.callback_query_handler(func=lambda call: call.data.startswith('answer_'))
def handle_answer(call):
    user_id = call.from_user.id
    chat_id = call.message.chat.id

    if user_id not in user_locks:
        user_locks[user_id] = threading.Lock()

    if not user_locks[user_id].acquire(blocking=False):
        bot.answer_callback_query(call.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Ç–µ—Å—å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –æ—Ç–≤–µ—Ç–∞.")
        return

    try:
        _, question_number, answer = call.data.split('_')
        question_number = int(question_number)

        if user_id not in user_answers:
            user_answers[user_id] = {'answers': [], 'fio': None, 'position': None, 'department': [], 'username': None}
            departments[user_id] = {dept: 0 for dept in '–ú HR –ò –ù –ü –ê'.split()}

        department_mapping = answer_to_department if question_number < 5 else answer_to_department_last
        department = department_mapping[answer]

        user_answers[user_id]['answers'].append(department)
        departments[user_id][department] += 1

        if len(user_answers[user_id]['answers']) < 5:
            send_question(chat_id, len(user_answers[user_id]['answers']) + 1)
        else:
            # –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω. –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Ç–¥–µ–ª –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            most_common_department = max(departments[user_id], key=departments[user_id].get)
            send_department_result(chat_id, most_common_department)

            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏
            markup = types.InlineKeyboardMarkup()
            apply_button = types.InlineKeyboardButton("–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É", callback_data="get_fio")
            markup.add(apply_button)

            bot.send_message(chat_id, "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞! –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É:", reply_markup=markup)

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ handle_answer: {e}")
    finally:
        user_locks[user_id].release()

# –ò–∑–º–µ–Ω–µ–Ω–∏—è –∑–¥–µ—Å—å
@bot.callback_query_handler(func=lambda call: call.data == "get_fio")
def ask_fio(call):
    chat_id = call.message.chat.id
    bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:")
    user_steps[chat_id] = "get_fio"  # –£—Å—Ç–∞–Ω–æ–≤–∏–º —à–∞–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

@bot.message_handler(func=lambda message: user_steps.get(message.chat.id) == "get_fio")
def get_fio(message):
    user_id = message.from_user.id
    user_answers[user_id]['username'] = message.from_user.username
    user_answers[user_id]['fio'] = message.text
    user_steps[message.chat.id] = None

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–æ–ª–∂–Ω–æ—Å—Ç—å
    bot.send_message(message.chat.id, questions['position']['question'], reply_markup=create_position_markup(), parse_mode="Markdown")

#–ò–∑–º–µ–Ω–µ–Ω–∏—è –∑–¥–µ—Å—å
@bot.callback_query_handler(func=lambda call: call.data.startswith('position_'))
def handle_position(call):
    user_id = call.from_user.id
    position = call.data.split('_')[1]
    user_answers[user_id]['position'] = position

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –æ—Ç–¥–µ–ª
    user_answers[user_id]['department'] = []  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –æ—Ç–¥–µ–ª–æ–≤
    bot.send_message(call.message.chat.id, questions['department']['question'], reply_markup=create_department_markup(), parse_mode="Markdown")

@bot.callback_query_handler(func=lambda call: call.data.startswith('department_'))
def handle_department_choice(call):
    user_id = call.from_user.id
    department_code = call.data.split('_')[1]

    if user_id not in selected_departments:
        selected_departments[user_id] = []

    if department_code == 'done':
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–∫–æ–Ω—á–∏–ª –≤—ã–±–æ—Ä –æ—Ç–¥–µ–ª–æ–≤
        if not selected_departments[user_id]:
            bot.answer_callback_query(call.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –æ—Ç–¥–µ–ª.")
            return

        user_answers[user_id]['department'] = selected_departments[user_id]
        # –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        show_confirmation(call.message)
    elif department_code == 'reset':
        # –°–±—Ä–æ—Å –≤—ã–±–æ—Ä–∞ –æ—Ç–¥–µ–ª–æ–≤
        selected_departments[user_id] = []
        bot.answer_callback_query(call.id, "–í—ã–±–æ—Ä –æ—Ç–¥–µ–ª–æ–≤ —Å–±—Ä–æ—à–µ–Ω.")
    else:
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–ª–∏ —É–¥–∞–ª—è–µ–º –æ—Ç–¥–µ–ª –∏–∑ —Å–ø–∏—Å–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö
        if department_code in selected_departments[user_id]:
            selected_departments[user_id].remove(department_code)
            bot.answer_callback_query(call.id, f"–û—Ç–¥–µ–ª {department_code} —É–¥–∞–ª–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞.")
        else:
            selected_departments[user_id].append(department_code)
            bot.answer_callback_query(call.id, f"–û—Ç–¥–µ–ª {department_code} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫.")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª–∞—Å—å –ª–∏ —Ä–∞–∑–º–µ—Ç–∫–∞ –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
    new_markup = create_department_markup()
    current_markup = call.message.reply_markup

    if new_markup.to_dict() != current_markup.to_dict():
        bot.edit_message_reply_markup(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            reply_markup=new_markup
        )

def show_confirmation(message):
    user_id = message.chat.id
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞
    fio = user_answers[user_id]['fio']
    position = user_answers[user_id]['position']
    departments_str = ", ".join([questions['department']['options'][code] for code in user_answers[user_id]['department']])

    text = f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:\n\n–§–ò–û: {fio}\n–î–æ–ª–∂–Ω–æ—Å—Ç—å: {position}\n–û—Ç–¥–µ–ª—ã: {departments_str}"

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å" –∏ "–ò–∑–º–µ–Ω–∏—Ç—å"
    markup = types.InlineKeyboardMarkup()
    confirm_button = types.InlineKeyboardButton("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_data")
    edit_button = types.InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å", callback_data="edit_data")
    markup.add(confirm_button, edit_button)

    bot.send_message(message.chat.id, text, reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data == "confirm_data")
def handle_confirm_data(call):
    user_id = call.from_user.id
    chat_id = call.message.chat.id

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –æ—Ç–¥–µ–ª–æ–≤
    selected_departments_str = ", ".join(user_answers[user_id]['department'])

    if user_id not in user_department_sent or not user_department_sent[user_id]:
        max_count = max(departments[user_id].values())
        suitable_departments = [key for key, value in departments[user_id].items() if value == max_count]

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É —Å –æ—Ç–≤–µ—Ç–∞–º–∏ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã —Ç–µ—Å—Ç–∞
        test_answers = ", ".join(user_answers[user_id]['answers'])

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É —Å –ø–æ–¥—Ö–æ–¥—è—â–∏–º–∏ –æ—Ç–¥–µ–ª–∞–º–∏
        suitable_depts_str = ", ".join(suitable_departments)

        user_department_sent[user_id] = True

        # –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∑–∞–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö –≤ Google Sheets
        values = [
            [
                user_answers[user_id]['username'],
                user_answers[user_id]['fio'],
                user_answers[user_id]['position'],
                selected_departments_str,  # –í—ã–±—Ä–∞–Ω–Ω—ã–µ –æ—Ç–¥–µ–ª—ã
                test_answers,  # –û—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã —Ç–µ—Å—Ç–∞
                suitable_depts_str  # –ü–æ–¥—Ö–æ–¥—è—â–∏–µ –æ—Ç–¥–µ–ª—ã –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º —Ç–µ—Å—Ç–∞
            ],
        ]
        body = {
            'values': values
        }
        try:
            result = service.spreadsheets().values().append(
                spreadsheetId=SPREADSHEET_ID, range=RANGE_NAME,
                valueInputOption="USER_ENTERED", body=body).execute()
            logging.info(
                f"–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ Google Sheets. {result.get('updates').get('updatedCells')} cells updated.")
            bot.send_message(chat_id, "*–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø—Ä–æ—è–≤–ª—è–µ—à—å –∏–Ω—Ç–µ—Ä–µ—Å –∫ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤ –ü—Ä–æ–≥—Ä–∞–º–º–µ.* –° —Ç–æ–±–æ–π –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å–≤—è–∂—É—Ç—Å—è üíó", parse_mode="Markdown")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≤ Google Sheets: {e}")
            bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö.")
    else:
        bot.send_message(chat_id, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—Ç–¥–µ–ª–∞—Ö —É–∂–µ –±—ã–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Ä–∞–Ω–µ–µ.")

@bot.callback_query_handler(func=lambda call: call.data == "edit_data")
def handle_edit_data(call):
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –∑–∞–ø—Ä–æ—Å—É –§–ò–û (–Ω–∞—á–∞–ª–æ –∞–Ω–∫–µ—Ç—ã)
    bot.send_message(call.message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:")
    user_steps[call.message.chat.id] = "get_fio"  # –£—Å—Ç–∞–Ω–æ–≤–∏–º —à–∞–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

def send_department_result(chat_id, department_code):
    if department_code in department_descriptions:
        department_info = department_descriptions[department_code]
        description = department_info['description']

        # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é –∏–∑ –Ω–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞—Ä—è
        if department_code in department_images:
            image_path = department_images[department_code]
        else:
            logging.error(f"Image path not found for department code: {department_code}")
            bot.send_message(chat_id, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–∞—Ä—Ç–∏–Ω–∫—É –¥–ª—è –æ—Ç–¥–µ–ª–∞.")
            return

        try:
            with open(image_path, 'rb') as photo:
                bot.send_photo(chat_id, photo, caption=description, parse_mode="Markdown")
        except FileNotFoundError:
            logging.error(f"Image file not found: {image_path}")
            bot.send_message(chat_id, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –æ—Ç–¥–µ–ª–∞.")
        except Exception as e:
            logging.error(f"Error sending department result: {e}")
            bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ—Ç–¥–µ–ª–µ.")
    else:
        bot.send_message(chat_id, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–∏–π –æ—Ç–¥–µ–ª.")

if __name__ == '__main__':
    try:
        bot.infinity_polling()
    except Exception as e:
        logging.error(f"Bot polling error: {e}")
