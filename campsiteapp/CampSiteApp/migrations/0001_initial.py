# Generated by Django 5.2.1 on 2025-05-25 10:08

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='ConfirmedBookingsModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('username', models.CharField(max_length=150)),
                ('quantity', models.IntegerField(default=0)),
            ],
        ),
        migrations.CreateModel(
            name='DateCampModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=120, unique=True)),
                ('full_name', models.CharField(max_length=120)),
                ('part', models.CharField(max_length=120)),
                ('date', models.DateField()),
                ('price', models.IntegerField()),
                ('places', models.IntegerField(default=1)),
                ('text', models.TextField(blank=True)),
            ],
        ),
        migrations.CreateModel(
            name='RecipientModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email', models.EmailField(max_length=254, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='CommentModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('username', models.CharField(max_length=4000)),
                ('text', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('stars', models.IntegerField(default=0)),
                ('date_camp', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='CampSiteApp.datecampmodel')),
            ],
        ),
        migrations.CreateModel(
            name='BookingModel',
            fields=[
                ('username', models.CharField(max_length=30)),
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('status', models.BooleanField(default=False, null=True)),
                ('quantity', models.IntegerField(default=0)),
                ('surname_parent', models.CharField(max_length=120)),
                ('name_parent', models.CharField(max_length=120)),
                ('patronymic_parent', models.CharField(max_length=120)),
                ('email_parent', models.EmailField(max_length=254)),
                ('number_parent', models.CharField(max_length=120)),
                ('series_passport_parent', models.CharField(max_length=120)),
                ('issued_passport_parent', models.CharField(max_length=120)),
                ('date_of_issue', models.DateField(null=True)),
                ('registration_address_parent', models.CharField(max_length=120)),
                ('surname_child', models.CharField(max_length=120)),
                ('name_child', models.CharField(max_length=120)),
                ('patronymic_child', models.CharField(max_length=120)),
                ('date_of_birth', models.DateField()),
                ('address_child', models.CharField(max_length=120)),
                ('passport_child', models.CharField(max_length=120, null=True)),
                ('issued_passport', models.CharField(max_length=120, null=True)),
                ('date_of_issue_child', models.DateField(null=True)),
                ('series_and_number', models.CharField(max_length=120, null=True)),
                ('comment', models.TextField(null=True)),
                ('date_camp', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='booking', to='CampSiteApp.datecampmodel')),
            ],
        ),
        migrations.CreateModel(
            name='UserModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('is_root', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
